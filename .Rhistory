########
reg <- dat %>%
group_by(x) %>%
plot_ly(labels = x, values = y) %>%
add_pie(hole = 0.6) %>%
layout(title = "Population totale d'enfants par region",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
reg
g <- ggplot(proj_R, aes(X__1[1:3])) + scale_fill_brewer(palette = "Spectral")
g + geom_freqpoly(aes(fill=Population.totale.d.enfants.ages.de.5.a.17ans[1:3]),
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
runApp()
runApp()
runApp()
library(maptools)
library(sp)
library(shapefiles)
library(leaflet)
library(rgdal)
library(sf)
library(readxl)
library(nlme)
library(raster)
region <- read_excel("region-1.xlsx")
fdc <- readShapePoly("C:/Users/KATHY/Desktop/travail/Tunisie_snuts4.shp")
fdc
plot(fdc1)
fdc1<- getData(name="GADM", country="TUN", level=1)
plot(fdc1)
i=match(fdc1$HASC_1,region$code)
fdc1a=cbind.Spatial(fdc1,region[i,])
xv=fdc1a@data$Enfants.economiquement.occupes
MyPaletteColor <- colorBin("Reds", NULL,7)
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xv,"")
mm<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xv),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mm
xa=fdc1a@data$Population.totale.d.enfants.ages.de.5.a.17ans
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xa,"")
ma<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xa),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
ma
xb=fdc1a@data$enfants.dans.le.travail.des.enfants
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xb,"")
mb<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xb),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mb
xc=fdc1a@data$enfants.dans.les.travaux.dangereux
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xc,"")
mc<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xc),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mc
library(maptools)
library(sp)
library(shapefiles)
library(leaflet)
library(rgdal)
library(sf)
library(readxl)
library(nlme)
library(raster)
region <- read_excel("region-1.xlsx")
fdc <- readShapePoly("C:/Users/KATHY/Desktop/travail/Tunisie_snuts4.shp")
fdc
plot(fdc1)
fdc1<- getData(name="GADM", country="TUN", level=1)
plot(fdc1)
i=match(fdc1$HASC_1,region$code)
fdc1a=cbind.Spatial(fdc1,region[i,])
xv=fdc1a@data$Enfants.economiquement.occupes
MyPaletteColor <- colorBin("Reds", NULL,7)
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xv,"")
mm<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xv),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mm
xa=fdc1a@data$Population.totale.d.enfants.ages.de.5.a.17ans
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xa,"")
ma<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xa),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
ma
xb=fdc1a@data$enfants.dans.le.travail.des.enfants
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xb,"")
mb<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xb),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mb
xc=fdc1a@data$enfants.dans.les.travaux.dangereux
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xc,"")
mc<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xc),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mc
runApp()
runApp()
library(shiny)
# Other useful packages
library(datasets)
library(rpart)
library(party)
library(fpc)
library(ggplot2)
library(plotly)
library(readxl)
library(maptools)
library(sp)
library(shapefiles)
library(leaflet)
library(rgdal)
library(sf)
library(readxl)
library(nlme)
library(raster)
region <- read_excel("region-1.xlsx")
proj_R <- read_excel("C:/Users/KATHY/Desktop/travail/projet_EnqueteNationaleduTravaildesEnfantsenTunisie2017.xlsx")
attach(proj_R)
x=proj_R$X__1[8:14]
y=proj_R$Population.totale.d.enfants.ages.de.5.a.17ans[8:14]
dat= data.frame( x=proj_R$X__1[8:14],
y=proj_R$Population.totale.d.enfants.ages.de.5.a.17ans[8:14])
age = data.frame(proj_R[1:3,])
sexe = data.frame(proj_R[4:5,])
milieu = data.frame(proj_R[6:7,])
region = data.frame(proj_R[8:14,])
# Define server logic
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Groupe d Age" = age,
"Sexe" = subset(sexe, sexe == "Sexe"),
"Milieu" = subset(milieu,  milieu == "Milieu"),
"Region" = subset(region, region == "Region"))
})
colors <- c( 'rgb(128,133,133)', 'rgb(211,94,96)')
# Show plotly
output$tot<- renderPlotly({
if(input$dataset=="Sexe"&&input$Yvar=="Population.totale.d.enfants")
{plot_ly(sexe, labels = sexe[,2], values =sexe[,3], type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Population total d enfants selon sexe',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)) }
else if(input$dataset=="Sexe"&&input$Yvar=="Enfants.economiquement.occupes")
{
plot_ly(sexe, labels = sexe[,2], values = sexe[,4], type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Enfant economiquement occupe',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
else if(input$dataset=="Sexe"&&input$Yvar=="enfants.dans.le.travail.des.enfants")
{
plot_ly(sexe, labels = sexe[,2], values = sexe[,5], type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'travaux non dangereux',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
else if(input$dataset=="Sexe"&&input$Yvar=="enfants.dans.les.travaux.dangereux")
{
plot_ly(sexe, labels = sexe[,2], values = sexe[,6], type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'travaux dangereux',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
else if(input$dataset=="Milieu"&&input$Yvar=="Population.totale.d.enfants")
{
plot_ly(milieu, x = milieu[,2], y = milieu[,3], type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Population total d enfants selon milieu",
xaxis = list(title = ""),
yaxis = list(title = "Population total d enfants"))
}
else if(input$dataset=="Milieu"&&input$Yvar=="Enfants.economiquement.occupes")
{
plot_ly(milieu, x = milieu[,2], y = milieu[,4], type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Enfant economiquement occupe",
xaxis = list(title = ""),
yaxis = list(title = ""))
}
else if(input$dataset=="Milieu"&&input$Yvar=="enfants.dans.le.travail.des.enfants")
{
plot_ly(milieu, x = milieu[,2], y = milieu[,5], type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Travaux Non Dangereux",
xaxis = list(title = ""),
yaxis = list(title = ""))
}
else if(input$dataset=="Milieu"&&input$Yvar=="enfants.dans.les.travaux.dangereux")
{
plot_ly(milieu, x = milieu[,2], y = milieu[,6], type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Travaux Dangereux",
xaxis = list(title = ""),
yaxis = list(title = ""))
}
else if(input$dataset=="Region"&&input$Yvar=="Population.totale.d.enfants")
{
plot_ly(y=y, x=x, type ='bar') %>%
layout(yaxis=list(type='linear'),title="population tolale d'enfants")
}
else if(input$dataset=="Region"&&input$Yvar=="Enfants.economiquement.occupes")
{
plot_ly(y=Enfants.economiquement.occupes[8:14], x=x, type ='bar') %>%
layout(yaxis=list(type='linear'),title="Enfants economiquement occupes")
}
else if(input$dataset=="Region"&&input$Yvar=="enfants.dans.le.travail.des.enfants")
{
plot_ly(y=enfants.dans.le.travail.des.enfants[8:14], x=x, type ='bar') %>%
layout(yaxis=list(type='linear'),title="travail non dangeux")
}
else if(input$dataset=="Region"&&input$Yvar=="enfants.dans.les.travaux.dangereux")
{
plot_ly(y=enfants.dans.les.travaux.dangereux[8:14], x=x, type ='bar') %>%
layout(yaxis=list(type='linear'),title="travail dangeux")
}
})
output$to<- renderPlotly({
dat %>%
group_by(x) %>%
plot_ly(labels = x, values = y) %>%
add_pie(hole = 0.6) %>%
layout(title = "Population totale d'enfants par region",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
output$tott<- renderPlotly({
plot_ly(type = 'box') %>%
add_boxplot(y = age[,5], jitter = 0.3, pointpos = -1.8, boxpoints = 'all',
marker = list(color = 'rgb(7,40,89)'),
line = list(color = 'rgb(7,40,89)'),
name = "non dangereux") %>%
add_boxplot(y = age[,6], name = "dangeureux", boxpoints = FALSE,
marker = list(color = 'rgb(9,56,125)'),
line = list(color = 'rgb(9,56,125)')) %>%
layout(title = "Box Plot")
})
output$table  <- DT::renderDataTable({
DT::datatable(proj_R)
})
# Generate a summary of the dataset (or subset by Iris.Species)
output$summary <- renderPrint({
dataset <- datasetInput()
Tableret = summary(proj_R[,3:6])
Tableret
})
output$su <- renderPrint({
dataset <- datasetInput()
Tableret = sapply(proj_R[,3:6], sd)
Tableret
})
output$sum <- renderPrint({
dataset <- datasetInput()
Tableret = sapply(proj_R[,3:6], var)
Tableret
})
fdc <- readShapePoly("D:/essai/travail/Tunisie_snuts4.shp")
i=match(fdc1$HASC_1,region$code)
xv=fdc1a@data$Enfants.economiquement.occupes
MyPaletteColor <- colorBin("Reds", NULL,7)
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xv,"")
output$map<-renderLeaflet({
mm<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xv),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mm
})
xa=fdc1a@data$Population.totale.d.enfants.ages.de.5.a.17ans
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xa,"")
output$map1<-renderLeaflet({
ma<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xa),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
ma
})
xb=fdc1a@data$enfants.dans.le.travail.des.enfants
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xb,"")
output$map2<-renderLeaflet({
mb<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xb),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mb
})
xc=fdc1a@data$enfants.dans.les.travaux.dangereux
my_popup <- paste0("<strong>",fdc1a@data$X__1,"</strong>",xc,"")
output$map3<-renderLeaflet({
mc<-leaflet(data = fdc1a) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~MyPaletteColor(xc),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = my_popup)
mc
})
})
runApp()
library(shiny)
library(shinythemes)
library(plotly)
shinyUI(navbarPage( h4("Travail des enfants en Tunisie",style="color:#ff6666;"),
theme = shinythemes::shinytheme("flatly"),
tabPanel(h4("About", style=" font-weight:bold;#000000"),
fluidRow(
column(6,includeMarkdown("trav.Rmd")),
column(3,
img(src='trav.PNG'))
)
),
tabPanel(h4("Table", style=" font-weight:bold;#000000"),
DT::dataTableOutput("table")),
tabPanel(h4("Plot", style=" font-weight:bold;#000000"),
sidebarLayout(
sidebarPanel(
h3("Filtrer les données"),
selectInput("dataset", "Choisissez un ensemble de données",
choices = c( "Sexe", "Milieu", "Region")),
selectInput("Yvar", "Choisissez votre variable",
choices = c("Population.totale.d.enfants", "Enfants.economiquement.occupes", "enfants.dans.le.travail.des.enfants", "enfants.dans.les.travaux.dangereux", selected = "Population.totale.d.enfants")
)),
mainPanel(
plotlyOutput("tot")
)
)
),
navbarMenu(h4("Summary", style=" font-weight:bold;#000000"),
tabPanel(h4("Summary", style=" font-weight:bold;#000000"),
verbatimTextOutput("summary")),
tabPanel(h4("ecart-type", style=" font-weight:bold;#000000"),
verbatimTextOutput("su")),
tabPanel(h4("variance", style=" font-weight:bold;#000000"),
verbatimTextOutput("sum"))),
navbarMenu(h4("More", style=" font-weight:bold;#000000"),
tabPanel(h4("cartographie1", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Population totale d enfants")),
mainPanel(
leafletOutput("map"))),
tabPanel(h4("cartographie2", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants economiquement occupes")),
mainPanel(
leafletOutput("map1"))),
tabPanel(h4("cartographie3", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants dans le travail des enfants")),
mainPanel(
leafletOutput("map2"))),
tabPanel(h4("cartographie4", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants dans le travail dans les travaux dangereux")),
mainPanel(
leafletOutput("map3")))
,
tabPanel(h4("other plots", style=" font-weight:bold;#000000"),
plotlyOutput("to"),
plotlyOutput("tott"))
)))
library(shiny)
library(shinythemes)
library(plotly)
shinyUI(navbarPage( h4("Travail des enfants en Tunisie",style="color:#ff6666;"),
theme = shinythemes::shinytheme("flatly"),
tabPanel(h4("About", style=" font-weight:bold;#000000"),
fluidRow(
column(6,includeMarkdown("trav.Rmd")),
column(3,
img(src='trav.PNG'))
)
),
tabPanel(h4("Table", style=" font-weight:bold;#000000"),
DT::dataTableOutput("table")),
tabPanel(h4("Plot", style=" font-weight:bold;#000000"),
sidebarLayout(
sidebarPanel(
h3("Filtrer les données"),
selectInput("dataset", "Choisissez un ensemble de données",
choices = c( "Sexe", "Milieu", "Region")),
selectInput("Yvar", "Choisissez votre variable",
choices = c("Population.totale.d.enfants", "Enfants.economiquement.occupes", "enfants.dans.le.travail.des.enfants", "enfants.dans.les.travaux.dangereux", selected = "Population.totale.d.enfants")
)),
mainPanel(
plotlyOutput("tot")
)
)
),
navbarMenu(h4("Summary", style=" font-weight:bold;#000000"),
tabPanel(h4("Summary", style=" font-weight:bold;#000000"),
verbatimTextOutput("summary")),
tabPanel(h4("ecart-type", style=" font-weight:bold;#000000"),
verbatimTextOutput("su")),
tabPanel(h4("variance", style=" font-weight:bold;#000000"),
verbatimTextOutput("sum"))),
navbarMenu(h4("More", style=" font-weight:bold;#000000"),
tabPanel(h4("cartographie1", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Population totale d enfants")),
mainPanel(
leafletOutput("map"))),
tabPanel(h4("cartographie2", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants economiquement occupes")),
mainPanel(
leafletOutput("map1"))),
tabPanel(h4("cartographie3", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants dans le travail des enfants")),
mainPanel(
leafletOutput("map2"))),
tabPanel(h4("cartographie4", style=" font-weight:bold;#000000"),
sidebarPanel(
h3("Enfants dans le travail dans les travaux dangereux")),
mainPanel(
leafletOutput("map3")))
,
tabPanel(h4("other plots", style=" font-weight:bold;#000000"),
plotlyOutput("to"),
plotlyOutput("tott"))
)))
runApp()
